# Generated by Django 3.0.5 on 2021-06-07 08:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import api.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('password',
                 models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True,
                                                    verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={
                    'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[
                                                  django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30,
                                                verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150,
                                               verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined',
                 models.DateTimeField(default=django.utils.timezone.now,
                                      verbose_name='date joined')),
                ('email', models.EmailField(max_length=200, unique=True,
                                            verbose_name='Email')),
                ('role', models.CharField(
                    choices=[('user', 'User'), ('moderator', 'Moderator'),
                             ('admin', 'Admin')], default='user',
                    max_length=15, verbose_name='Role')),
                ('bio', models.TextField(blank=True, max_length=2000,
                                         verbose_name='Bio')),
                ('confirmation_code',
                 models.CharField(blank=True, editable=False, max_length=70,
                                  null=True, unique=True,
                                  verbose_name='Code')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set',
                                                  related_query_name='user',
                                                  to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True,
                                                            help_text='Specific permissions for this user.',
                                                            related_name='user_set',
                                                            related_query_name='user',
                                                            to='auth.Permission',
                                                            verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True,
                                          verbose_name='Category')),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True,
                                          verbose_name='Genre')),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200,
                                          verbose_name='Title')),
                ('year', models.PositiveSmallIntegerField(
                    validators=[api.models.Title.year_validate],
                    verbose_name='Year of publication')),
                ('raiting',
                 models.IntegerField(null=True, verbose_name='Raiting')),
                ('description',
                 models.CharField(max_length=200, verbose_name='Description')),
                ('category', models.ForeignKey(blank=True, null=True,
                                               on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='titles',
                                               to='api.Category',
                                               verbose_name='Category')),
                ('genre', models.ManyToManyField(blank=True, db_index=True,
                                                 related_name='titles',
                                                 to='api.Genre',
                                                 verbose_name='Genre')),
            ],
            options={
                'ordering': ('-year',),
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст отзыва')),
                ('pub_date', models.DateTimeField(auto_now_add=True,
                                                  verbose_name='Дата публикации отзыва')),
                ('score', models.IntegerField(
                    help_text='Оценка произведения от 1 до 10',
                    validators=[django.core.validators.MinValueValidator(1),
                                django.core.validators.MaxValueValidator(10)],
                    verbose_name='Рейтинг')),
                ('author',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='reviews',
                                   to=settings.AUTH_USER_MODEL,
                                   verbose_name='Автор отзыва')),
                ('title',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='reviews', to='api.Title',
                                   verbose_name='Оцениваемое произведение')),
            ],
            options={
                'ordering': ('-pub_date',),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст комментария')),
                ('pub_date', models.DateTimeField(auto_now_add=True,
                                                  verbose_name='Дата публикации комментария')),
                ('author',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='comments',
                                   to=settings.AUTH_USER_MODEL,
                                   verbose_name='Автор комментария')),
                ('review',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='comments', to='api.Review',
                                   verbose_name='Комментируемый отзыв')),
            ],
            options={
                'ordering': ('-pub_date',),
            },
        ),
    ]
